#!/usr/bin/python3

import os
import re
import sys
import subprocess

import logging
import logging.handlers

# Create logger to log to syslog
syslogger = logging.getLogger('SysLogger')
syslogger.setLevel(logging.DEBUG)
handler = logging.handlers.SysLogHandler(address='/dev/log', facility="local1")
formatter = logging.Formatter('GIT-SERVER (hooks): %(message)s')
handler.setFormatter(formatter)
syslogger.addHandler(handler)

# Define zero variable, to match an empty sha
zero = "0000000000000000000000000000000000000000"

# Get user doing the action from environment
user = os.environ['REMOTE_USER']

# Get name of the repo being used
repo = os.path.basename(os.getcwd())

# Get information passed to the update hook
ref_name = sys.argv[1]  # refs/heads/master
old_sha = sys.argv[2]   # 12aa37ee58379c29186200f1fd92db689f53a24d
new_sha = sys.argv[3]   # b7eddb0077cae69a884c6ddc69cb18a030f0f27f

# Function to report errors to syslog in a nice way
def report_error(error_string):
    syslogger.critical(error_string)
    print('')
    print('Reporting error:')
    print('')
    print('    ' + error_string)
    print('')

# Function to find out if commit is present in a branch
def commit_in_branch(commit, branch):
    cmd = ['git', 'name-rev', '--refs='+branch, '--no-undefined', commit]
    FNULL = open(os.devnull, 'w')
    retcode = subprocess.call(cmd, stdout=FNULL, stderr=FNULL)
    return retcode == 0


if ref_name.startswith('refs/heads/'):
    # User is trying to push to a branch.

    # Get branch_name by removing 'refs/heads/' from ref_name
    branch_name = ref_name[11:]

    # Allow pushing to 'develop' and 'master' for now
    permitted_branches = ['master', 'develop']
    if branch_name not in permitted_branches:
        # If user is creating a new branch, ban branches that
        # don't start with "scenario"
        if (old_sha == zero) and (not branch_name.startswith('scenario')):
            print("CREATING BRANCH WITH NAME '%s' IS NOT PERMITTED!" % branch_name)
            error = "create-branch-hook - User: \"%s\", Repo: \"%s\", Branch: \"%s\"" % (user, repo, branch_name)
            report_error(error)
            sys.exit(1) # Abort push
    else: #for merging
        #currently copied almost verbatim from stackoverflow; I don't even know
        # what 'pr' is meant to be short for ('process', maybe?)
        pr = subprocess.Popen(['/usr/bin/git', 'show'],
            cwd=os.getcwd(),#not sure if this will work; was hardcoding on my system
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            shell=False)
        (out, error) = pr.communicate()
        out = out.splitlines()
        author = out[1]
        author_split = author.split()
        author_email = author_split[3]
        user_email = 'foo@bar.com' #user should be an object with a name and email, and same for author...
        if user_email == author_email:
            print("YOU MAY NOT MERGE YOUR OWN PATCH!")
            error = "User %s tried to merge a commit they had authored." %s
            report_error(error)
            sys.exit(1)

if ref_name.startswith('refs/tags/'):
    # User is trying to push a tag
    tag_name = ref_name[10:]
    if not commit_in_branch(new_sha, "master"):
        # Ban tags that are not tagging a commit in 'master'
        print("TAGGING COMMITS NOT PRESENT IN 'master' IS NOT PERMITTED!")
        error = "create-tag-not-in-master - User: \"%s\", Repo: \"%s\", Tag: \"%s\"" % (user, repo, tag_name)
        report_error(error)
        sys.exit(1) # Abort push
