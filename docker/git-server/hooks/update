#!/usr/bin/python3

import os
import re
import sys
import subprocess

import logging
import logging.handlers

# Create logger to log to syslog
syslogger = logging.getLogger('SysLogger')
syslogger.setLevel(logging.DEBUG)
handler = logging.handlers.SysLogHandler(address='/dev/log', facility="local1")
formatter = logging.Formatter('GIT-SERVER (hooks): %(message)s')
handler.setFormatter(formatter)
syslogger.addHandler(handler)

# Define zero variable, to match an empty sha
zero = "0000000000000000000000000000000000000000"

# Get user doing the action from environment
user = os.environ['REMOTE_USER']

print(os.environ)

# Get name of the repo being used
repo = os.path.basename(os.getcwd())

# The project shares its name with the repo; this is syntactic sugar:
project = repo

# Get information passed to the update hook
ref_name = sys.argv[1]  # refs/heads/master
old_sha = sys.argv[2]   # 12aa37ee58379c29186200f1fd92db689f53a24d
new_sha = sys.argv[3]   # b7eddb0077cae69a884c6ddc69cb18a030f0f27f

# Our supported roles

roles = ['developer', 'productowner', 'reviewer']

# Function to report errors to syslog in a nice way
def report_error(error_string):
    syslogger.critical(error_string)
    print('')
    print('Reporting error:')
    print('')
    print('    ' + error_string)
    print('')

# Function to find out if commit is present in a branch
def commit_in_branch(commit, branch):
    cmd = ['git', 'name-rev', '--refs='+branch, '--no-undefined', commit]
    FNULL = open(os.devnull, 'w')
    retcode = subprocess.call(cmd, stdout=FNULL, stderr=FNULL)
    return retcode == 0

# Function to find last tag
def last_tag(commit):
    cmd = ['git', 'describe', '--abbrev=0', '--tags', commit]
    FNULL = open(os.devnull, 'w')
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=FNULL)
    stdout, stderr = p.communicate()
    return stdout.decode('ascii').strip() or None

# Function to get the revision type. Useful to differentiate between
# annotated and unannotated tags
def get_rev_type(sha):
    cmd = ['git', 'cat-file', '-t', sha]
    FNULL = open(os.devnull, 'w')
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=FNULL)
    stdout, stderr = p.communicate()
    # It can return: commit, tag, delete
    return stdout.decode('ascii').strip()

# Function to get the commit sha that an annotated tag is pointing to
def get_commit_annotated_tag(sha):
    cmd = ['git', 'rev-list', '-1', sha]
    FNULL = open(os.devnull, 'w')
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=FNULL)
    stdout, stderr = p.communicate()
    return stdout.decode('ascii').strip()

# Function to get the tagger mail address from an annotated tag
# FIXME: make more robust; it can easily fail
def get_tagger_tag(sha):
    cmd = ['git', 'cat-file', 'tag', sha]
    FNULL = open(os.devnull, 'w')
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=FNULL)
    stdout, stderr = p.communicate()
    result = re.search('<(.*)>', stdout.decode('ascii'))
    return result.group(1)

# Function to check if the tagger was a committer between
# two different tags
def committer_between_tags(tagger, new_tag_commit, old_tag):
    # If old_tag is not None, look at the log until that tag.
    # Otherwise, look at the entire log
    if old_tag:
        cmd = ['git', 'log', '--format="%ce"', 'refs/tags/' + old_tag, new_tag_commit]
    else:
        cmd = ['git', 'log', '--format="%ce"', new_tag_commit]
    FNULL = open(os.devnull, 'w')
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=FNULL)
    stdout, stderr = p.communicate()
    email_list = stdout.decode('ascii').splitlines()

    # Check if the tagger email is present in the commits history
    for mail in email_list:
        if tagger == mail[1:-1]:
            return True
    return False


def get_groups():
    """ Give list of group names to which the current user belongs"""
    cmd = ["id", "-Gn"]
    # get list of groups that user is in
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=FNULL)
    stdout, stderr = p.communicate()
    groups = stdout
    # split list of groups into an array so we can operate with them
    groups = groups.split(" ")
    return groups


def check_user_has_role(role, groups):
    """ Check relevant role is one of groups to which the user belongs."""

    if role not in groups:
        return role
    else:
        return


def error_message(role):
    """ Construct an informative error message depending on role needed"""

    message = []
    role_texts = {}
    role_texts['developer'] = 'YOU DO NOT HAVE PERMISSION TO PUSH.'
    role_texts['reviewer'] = 'YOU DO NOT HAVE PERMISSION TO MERGE.'
    role_texts['productowner'] = 'YOU DO NOT HAVE PERMISSION TO TAG.'

    if role in role_texts:
        return role_texts[role]


def is_action_allowed(role):
    """ Check user's role permits them to perform an action, eg: `git push` """

    groups = get_groups()

    # check if a user lacks the right role
    if check_user_has_role(role, groups) == role:
        return error_message(role), 1
    else:
        return 'everything is good and this should be fine', 0

if ref_name.startswith('refs/heads/'):
    # User is trying to push to a branch.

    # Get branch_name by removing 'refs/heads/' from ref_name
    branch_name = ref_name[11:]

    required_role = project + '_' + 'developer'

    developer_message, developer_exit_status = is_action_allowed(required_role)

    if developer_exit_status == 1:
        print developer_message
        sys.exit(1)  # Abort push

    main_branches = ['master', 'develop']

    # Allow push to develop if user has 'reviewer' role
    if branch_name == 'develop':

        required_role = project + '_' + 'revewier'
        reviewer_message, reviewer_exit_status = is_action_allowed(required_role)

        if reviewer_exit_status == 1:
            print reviewer_message
            sys.exit(1)  # Abort push

    # Allow push to master if user has 'product owner' role
    if branch_name == 'master':

        required_role = project + '_' + 'productowner'
        owner_message, owner_exit_status = is_action_allowed(required_role)

        if owner_exit_status == 1:
            print owner_message
            sys.exit(1)  # Abort push

    if branch_name not in main_branches:
        # If user is creating a new branch, ban branches that
        # don't start with "scenario"
        if (old_sha == zero) and (not branch_name.startswith('scenario')):
            print("CREATING BRANCH WITH NAME '%s' IS NOT PERMITTED!" % branch_name)
            error = "create-branch-hook - User: \"%s\", Repo: \"%s\", Branch: \"%s\"" % (user, repo, branch_name)
            report_error(error)
            sys.exit(1)  # Abort push

if ref_name.startswith('refs/tags/'):
    # User is trying to push a tag
    tag_name = ref_name[10:]
    rev_type = get_rev_type(new_sha)

    required_role = project + '_' + 'productowner'

    owner_message, owner_exit_status = is_action_allowed(required_role)

    if owner_exit_status == 1:
        print owner_message
        sys.exit(1)  # Abort push

    if rev_type == "commit":
        # User is trying to push an unannotated tag. We don't allow
        # this because we want git to have information about who is
        # creating the tags. This is only possible with annotated tags.
        print("TAGGING UNANNOTATED TAGS IS NOT PERMITTED!")
        error = "create-tag-unannotated - User: \"%s\", Repo: \"%s\", Tag: \"%s\"" % (user, repo, tag_name)
        report_error(error)
        sys.exit(1)  # Abort push

    commit_tagged = get_commit_annotated_tag(new_sha)
    if not commit_in_branch(commit_tagged, "master"):
        # Ban tags that are not tagging a commit in 'master'
        print("TAGGING COMMITS NOT PRESENT IN 'master' IS NOT PERMITTED!")
        error = "create-tag-not-in-master - User: \"%s\", Repo: \"%s\", Tag: \"%s\"" % (user, repo, tag_name)
        report_error(error)
        sys.exit(1)  # Abort push
    else:
        tagger = get_tagger_tag(new_sha)
        last_tag_found = last_tag(commit_tagged)
        if committer_between_tags(tagger, commit_tagged, last_tag_found):
            # User is tagging a release where he was also a committer
            print("TAGGING WHEN COMMITTER SINCE LAST TAG IS NOT PERMITTED!")
            error = "create-tag-when-committer - User: \"%s\", Repo: \"%s\", Tag: \"%s\"" % (user, repo, tag_name)
            report_error(error)
            sys.exit(1)  # Abort push
