Common implementations for yarn tests
=====================================


    IMPLEMENTS THEN "(.+)" succeeded
    cmd_filename=$(replace_spaces_in_cmd "$MATCH_1")
    case $(cat "$DATADIR/$cmd_filename-exit") in
    0)  echo "\"$MATCH_1\" succeeded!"
        ;;
    *)  cat "$DATADIR/$cmd_filename-out" >&2
        die "\"$MATCH_1\" should have succeeded, but didn't. Unexpected failure!"
        ;;
    esac

    IMPLEMENTS WHEN user configures git "(\S+)" to "(.+)"
    var="$MATCH_1"
    value="$MATCH_2"
    attempt_command "git config" --global $var "$value"


    IMPLEMENTS ASSUMING gitserver is running
    if [ "x$gitserver_ip" = "x" ]; then
        die "\"$gitserver_ip\" variable is empty!"
    fi
    echo $gitserver_ip > "$DATADIR"/current.ip


    IMPLEMENTS ASSUMING git client configured
    execute_command "git config" --global user.email "user@domain.com"
    execute_command "git config" --global user.name "User Name"


    IMPLEMENTS GIVEN a local clone of "(\S+)" repository
    git_ip="$(cat "$DATADIR"/current.ip)"
    repo=$MATCH_1
    execute_command "git clone" http://testuser:testpass@$git_ip/git/$repo


    IMPLEMENTS GIVEN some new text in "(\S+)" file in "(\S+)" repository
    file="$MATCH_1"
    repo="$MATCH_2"
    echo "This content was created by the tests" >> "$DATADIR/$repo/$file"

    IMPLEMENTS GIVEN multiple lines of new text in "(\S+)" file in "(\S+)" repository
    file="$MATCH_1"
    repo="$MATCH_2"
    echo "This content was created by the tests" >> "$DATADIR/$repo/$file \n cat \n dog \n fish"

    IMPLEMENTS GIVEN multiple lines_2 of new text in "(\S+)" file in "(\S+)" repository
    file="$MATCH_1"
    repo="$MATCH_2"
    echo "This content was created by the tests" >> "$DATADIR/$repo/$file \n cat \n frog \n fish"

    IMPLEMENTS GIVEN multiple lines_3 of new text in "(\S+)" file in "(\S+)" repository
    file="$MATCH_1"
    repo="$MATCH_2"
    echo "This content was created by the tests" >> "$DATADIR/$repo/$file \n cat \n dog \n bear"



    IMPLEMENTS WHEN user pushes all changes to "(\S+)" in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    execute_command_in_folder "git add" "$DATADIR/$repo" .
    execute_command_in_folder "git commit" "$DATADIR/$repo" -m "Automated commit"
    attempt_command_in_folder "git push" "$DATADIR/$repo" origin $branch

    IMPLEMENTS GIVEN user commits all changes to "(\S+)" in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    execute_command_in_folder "git add" "$DATADIR/$repo" .
    execute_command_in_folder "git commit" "$DATADIR/$repo" -m "Automated commit"

    IMPLEMENTS GIVEN a local branch "(\S+)" branched from "(\S+)" in "(\S+)" repository
    branch="$MATCH_1"
    base_branch="$MATCH_2"
    repo="$MATCH_3"
    execute_command_in_folder "git checkout" "$DATADIR/$repo" $base_branch
    execute_command_in_folder "git checkout" "$DATADIR/$repo" -b $branch


    IMPLEMENTS WHEN user pushes to "(\S+)" in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    attempt_command_in_folder "git push" "$DATADIR/$repo" origin $branch


    IMPLEMENTS GIVEN the branch "(\S+)" checked out in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    execute_command_in_folder "git checkout" "$DATADIR/$repo" $branch


    IMPLEMENTS WHEN user merges "(\S+)" in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    attempt_command_in_folder "git merge" "$DATADIR/$repo" origin/$branch

    IMPLEMENTS WHEN user merges "(\S+)" and "(\S+)" in "(\S+)" repository
    branch_1="$MATCH_1"
    branch_2="$MATCH_2"
    repo="$MATCH_3"
    attempt_command_in_folder "git merge" "$DATADIR/$repo" $branch_1 $branch_2

    IMPLEMENTS WHEN new commits in "(\S+)" are cherry-picked into "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    attempt_command_in_folder "git cherry-pick" "$DATADIR/$repo" $branch


    IMPLEMENTS GIVEN the branch "(\S+)" is merged in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    execute_command_in_folder "git merge" "$DATADIR/$repo" origin/$branch


    IMPLEMENTS GIVEN a tag "(\S+)" is created in "(\S+)" repository
    tag="$MATCH_1"
    repo="$MATCH_2"
    execute_command_in_folder "git tag" "$DATADIR/$repo" $tag

    IMPLEMENTS WHEN user runs "git blame" on "(\S+)" in "(\S+)" in "(\S+)" repository
    file="$MATCH_1"
    branch="$MATCH_2"
    repo="$MATCH_3"
    attempt_command_in_folder "git blame" "$DATADIR/$repo" "$branch" "$file"

    IMPLEMENTS WHEN user force pushes changes to "(\S+)" in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    attempt_command_in_folder "git push -f" "$DATADIR/$repo" origin "$branch" 

    IMPLEMENTS WHEN user bisects in "(\S+)" in "(\S+)" repository against tag "(\S+)" and tag "(\S+)"
    branch="$MATCH_1"
    repo="$MATCH_2"
    tag_1="$MATCH_3"
    tag_2="$MATCH_4"
    execute_command_in_folder "git bisect start" "$DATADIR/$repo" $branch
    execute_command_in_folder "git bisect bad" "$DATADIR/$repo" $tag_1
    execute_command_in_folder "git bisect good" "$DATADIR/$repo" $tag_2
    attempt_command_in_folder "git bisect reset" "$DATADIR/$repo" $branch

    IMPLEMENTS GIVEN a git server running with ip stored in gitserver_ip
    echo $gitserver_ip > "$DATADIR"/current.ip


    IMPLEMENTS GIVEN a haproxy server running with ip stored in haproxy_ip
    echo $haproxy_ip > "$DATADIR"/current.ip


    IMPLEMENTS WHEN user attempts to "(.+)" "(\S+)"( with prefix "(\S+)")?( with user "(\S+)" and password "(\S+)")?
    address="$(cat "$DATADIR"/current.ip)"
    if [ "$MATCH_3" != '' ]; then
        address="$MATCH_4.$address.xip.io"
    fi
    if [ "$MATCH_5" != '' ]; then
        user_and_pass="$MATCH_6":"$MATCH_7"@
    else
        user_and_pass=""
    fi
    attempt_command "$MATCH_1" "http://""$user_and_pass""$address""$MATCH_2"


    IMPLEMENTS THEN the "(.+)" error message includes the string "(.*)"
    cmd_filename=$(replace_spaces_in_cmd "$MATCH_1")
    grep "$MATCH_2" "$DATADIR/$cmd_filename-err"


    IMPLEMENTS THEN file "(.+)" includes the string "(.*)"
    grep "$MATCH_2" "$DATADIR/$MATCH_1"


    IMPLEMENTS THEN "(.+)" failed
    cmd_filename=$(replace_spaces_in_cmd "$MATCH_1")
    case $(cat "$DATADIR/$cmd_filename-exit") in
        0) die "\"$MATCH_1\" should have failed, but didn't. Unexpected success!" ;;
    esac

