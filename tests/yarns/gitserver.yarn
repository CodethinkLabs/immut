Immut Git client tests
======================

Configure_git_client.YARN

    SCENARIO user configures git client
    WHEN user configures git "user.name" to "User Name"
    THEN "git config" succeeded
    WHEN user configures git "user.email" to "user@domain.com"
    THEN "git config" succeeded

Configure_git_authentication.YARN

??

Create__master_Branch.YARN

    SCENARIO user creates master git branch
    ASSUMING gitserver is running
    AND git client configured
    GIVEN a local clone of "foo" repository
    AND some new text in "test" file in "foo" repository
    WHEN user pushes all changes to "master" in "foo" repository
    THEN "git push" succeeded

Create__develop_Branch.YARN

    SCENARIO user creates develop git branch
    ASSUMING gitserver is running
    AND git client configured
    GIVEN a local clone of "foo" repository
    AND a local branch "develop" branched from "master" in "foo" repository
    WHEN user pushes to "develop" in "foo" repository
    THEN "git push" succeeded

Create_feature_Branch.YARN

    SCENARIO user creates feature git branch
    ASSUMING gitserver is running
    AND git client configured
    GIVEN a local clone of "foo" repository
    AND a local branch "feature-branch" branched from "develop" in "foo" repository
    WHEN user pushes to "feature-branch" in "foo" repository
    THEN "git push" succeeded

Commit_feature_Branch.YARN

    SCENARIO user commits to feature git branch
    ASSUMING gitserver is running
    AND git client configured
    GIVEN a local clone of "foo" repository
    AND the branch "feature-branch" checked out in "foo" repository
    AND some new text in "test" file in "foo" repository
    WHEN user pushes all changes to "feature-branch" in "foo" repository
    THEN "git push" succeeded

Review_feature_Branch.YARN

    SCENARIO user can review feature branch
    ASSUMING gitserver is running
    AND git client configured
    GIVEN a local clone of "foo" repository
    AND the branch "develop" checked out in "foo" repository
    WHEN user merges "feature-branch" in "foo" repository
    THEN "git merge" succeeded

Merge_feature_Branch_to_develop.YARN

    SCENARIO user can merge a feature branch back to develop
    ASSUMING gitserver is running
    AND git client configured
    GIVEN a local clone of "foo" repository
    AND the branch "develop" checked out in "foo" repository
    AND the branch "feature-branch" is merged in "foo" repository
    WHEN user pushes to "develop" in "foo" repository
    THEN "git push" succeeded

Merge_develop_to_master.YARN

    SCENARIO user can merge the "develop" branch into master
    ASSUMING gitserver is running
    AND git client configured
    GIVEN a local clone of "foo" repository
    AND the branch "master" checked out in "foo" repository
    AND the branch "develop" is merged in "foo" repository
    WHEN user pushes to "master" in "foo" repository
    THEN "git push" succeeded

TAG_release_on_master.YARN

    SCENARIO user can tag a release on master branch
    ASSUMING gitserver is running
    AND git client configured
    GIVEN a local clone of "foo" repository
    AND the branch "master" checked out in "foo" repository
    AND a tag "release_01" is created in "foo" repository
    WHEN user pushes to "release_01" in "foo" repository
    THEN "git push" succeeded


Implementations section
-----------------------

    IMPLEMENTS WHEN user configures git "(\S+)" to "(.+)"
    var="$MATCH_1"
    value="$MATCH_2"
    attempt_command "git config" --global $var "$value"


    IMPLEMENTS ASSUMING gitserver is running
    if [ "x$gitserver_ip" = "x" ]; then
        die "\"$gitserver_ip\" variable is empty!"
    fi
    echo $gitserver_ip > "$DATADIR"/current.ip


    IMPLEMENTS ASSUMING git client configured
    execute_command "git config" --global user.email "user@domain.com"
    execute_command "git config" --global user.name "User Name"


    IMPLEMENTS GIVEN a local clone of "(\S+)" repository
    git_ip="$(cat "$DATADIR"/current.ip)"
    repo=$MATCH_1
    execute_command "git clone" http://testuser:testpass@$git_ip/git/$repo


    IMPLEMENTS GIVEN some new text in "(\S+)" file in "(\S+)" repository
    file="$MATCH_1"
    repo="$MATCH_2"
    echo "This content was created by the tests" >> "$DATADIR/$repo/$file"


    IMPLEMENTS WHEN user pushes all changes to "(\S+)" in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    execute_command_in_folder "git add" "$DATADIR/$repo" .
    execute_command_in_folder "git commit" "$DATADIR/$repo" -m "Automated commit"
    attempt_command_in_folder "git push" "$DATADIR/$repo" origin $branch


    IMPLEMENTS GIVEN a local branch "(\S+)" branched from "(\S+)" in "(\S+)" repository
    branch="$MATCH_1"
    base_branch="$MATCH_2"
    repo="$MATCH_3"
    execute_command_in_folder "git checkout" "$DATADIR/$repo" $base_branch
    execute_command_in_folder "git checkout" "$DATADIR/$repo" -b $branch


    IMPLEMENTS WHEN user pushes to "(\S+)" in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    attempt_command_in_folder "git push" "$DATADIR/$repo" origin $branch


    IMPLEMENTS GIVEN the branch "(\S+)" checked out in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    execute_command_in_folder "git checkout" "$DATADIR/$repo" $branch


    IMPLEMENTS WHEN user merges "(\S+)" in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    attempt_command_in_folder "git merge" "$DATADIR/$repo" origin/$branch


    IMPLEMENTS GIVEN the branch "(\S+)" is merged in "(\S+)" repository
    branch="$MATCH_1"
    repo="$MATCH_2"
    execute_command_in_folder "git merge" "$DATADIR/$repo" origin/$branch


    IMPLEMENTS GIVEN a tag "(\S+)" is created in "(\S+)" repository
    tag="$MATCH_1"
    repo="$MATCH_2"
    execute_command_in_folder "git tag" "$DATADIR/$repo" $tag
