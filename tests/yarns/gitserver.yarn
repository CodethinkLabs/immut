Immut Git server tests
======================

    SCENARIO Running a git server container
    GIVEN a gitserver container
    AND user gituser with password gitpasswd exist

    WHEN user attempts to "wget" "/cgit"
    THEN "wget" failed
    AND the "wget" error message includes the string "Authentication Failed"

    WHEN user attempts to "wget" "/cgit-data/cgit.png"
    THEN "wget" failed
    AND the "wget" error message includes the string "Authentication Failed"

    WHEN user attempts to "wget" "/cgit" with user "gituser" and password "gitpasswd"
    THEN "wget" succeeded

    WHEN user attempts to "wget" "/cgit-data/cgit.png" with user "gituser" and password "gitpasswd"
    THEN "wget" succeeded

    WHEN user attempts to "git clone" "/git/bar"
    THEN "git clone" failed
    AND the "git clone" error message includes the string "terminal prompts disabled"

    WHEN user attempts to "git clone" "/git/bar" with user "fakeuser" and password "fakepass"
    THEN "git clone" failed
    AND the "git clone" error message includes the string "Authentication failed"

    WHEN user attempts to "git clone" "/git/bar" with user "gituser" and password "gitpasswd"
    THEN "git clone" succeeded

    WHEN user attempts to "wget" "/"
    THEN "wget" failed
    AND file "index.html" includes the string "Test Page for the Apache HTTP Server on Fedora"

    FINALLY the container gitserver is shut down



Implementation sections for Git server tests
--------------------------------------------

    IMPLEMENTS GIVEN a (\S+) container
    docker run -d --cidfile "$DATADIR"/current.cid "$MATCH_1"
    get_docker_ip current.cid > "$DATADIR"/current.ip


    IMPLEMENTS FINALLY the container (\S+) is shut down
    docker kill `cat "$DATADIR"/current.cid` || true
    docker rm `cat "$DATADIR"/current.cid` || true
    rm "$DATADIR"/current.cid || true
    rm "$DATADIR"/current.ip || true


    IMPLEMENTS GIVEN  user (\S+) with password (\S+) exist
    # Authenticate using local accounts
    run_in_docker "$DATADIR"/current.cid "sed -e 's/sss/unix/g' -i /etc/pam.d/sss_git"
    # Make /etc/shadow readable for all users
    run_in_docker "$DATADIR"/current.cid "chmod 644 /etc/shadow"
    # Create new user and password
    run_in_docker "$DATADIR"/current.cid "useradd -M $MATCH_1"
    run_in_docker "$DATADIR"/current.cid "echo $MATCH_1:$MATCH_2 | chpasswd"


    IMPLEMENTS WHEN user attempts to "(.+)" "(\S+)"( with user "(\S+)" and password "(\S+)")?
    ip="$(cat "$DATADIR"/current.ip)"
    if [ "$MATCH_3" != '' ]; then
        user_and_pass="$MATCH_4":"$MATCH_5"@
    else
        user_and_pass=""
    fi
    attempt_command "$MATCH_1" http://"$user_and_pass""$ip""$MATCH_2"


    IMPLEMENTS THEN the "(.+)" error message includes the string "(.*)"
    cmd_filename=$(replace_spaces_in_cmd "$MATCH_1")
    grep "$MATCH_2" "$DATADIR/$cmd_filename-err"


    IMPLEMENTS THEN file "(.+)" includes the string "(.*)"
    grep "$MATCH_2" "$DATADIR/$MATCH_1"


    IMPLEMENTS THEN "(.+)" succeeded
    cmd_filename=$(replace_spaces_in_cmd "$MATCH_1")
    case $(cat "$DATADIR/$cmd_filename-exit") in
    0)  echo "\"$MATCH_1\" succeeded!"
        ;;
    *)  cat "$DATADIR/$cmd_filename-out" >&2
        die "\"$MATCH_1\" should have succeeded, but didn't. Unexpected failure!"
        ;;
    esac


    IMPLEMENTS THEN "(.+)" failed
    cmd_filename=$(replace_spaces_in_cmd "$MATCH_1")
    case $(cat "$DATADIR/$cmd_filename-exit") in
        0) die "\"$MATCH_1\" should have failed, but didn't. Unexpected success!" ;;
    esac
